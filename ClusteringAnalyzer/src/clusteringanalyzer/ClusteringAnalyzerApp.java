/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package clusteringanalyzer;

import html.HTMLUtilities;
import java.awt.Desktop;
import java.io.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Abdur Jabbar <arjabbar@yahoo.com>
 */
public class ClusteringAnalyzerApp extends javax.swing.JFrame {
    

    /**
     * Creates new form ClusteringAnalyzerApp
     */
    public ClusteringAnalyzerApp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        list_files = new javax.swing.JList(ClusteringOps.fileArray(new File("."), ".txt"));
        jLabel7 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        list_initMethods = new javax.swing.JList(InitMethod.values());
        jLabel8 = new javax.swing.JLabel();
        label_points = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        label_attributes = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        field_clusters = new javax.swing.JSpinner();
        label_clusters = new javax.swing.JLabel();
        label_iter = new javax.swing.JLabel();
        field_iterations = new javax.swing.JSpinner();
        label_runs = new javax.swing.JLabel();
        field_runs = new javax.swing.JSpinner();
        label_subsets = new javax.swing.JLabel();
        field_subsets = new javax.swing.JSpinner();
        label_scale = new javax.swing.JLabel();
        field_scale = new javax.swing.JSpinner(new SpinnerNumberModel(2.0, 0.0, 2.0, .05));
        jSeparator6 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        pane_stats = new javax.swing.JEditorPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        list_clusteringMethods = new javax.swing.JList(ClusteringMethod.values());
        jLabel9 = new javax.swing.JLabel();
        label_iterTol = new javax.swing.JLabel();
        field_tol = new javax.swing.JSpinner(new SpinnerNumberModel(new Float(1e-6), new Float(0.0), new Float(1.0), new Float(1e-6)));
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        output_status = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        paneCentroids = new javax.swing.JEditorPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        paneSSE = new javax.swing.JEditorPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        paneRunData = new javax.swing.JEditorPane();
        jScrollPane11 = new javax.swing.JScrollPane();
        paneError = new javax.swing.JEditorPane();
        jPanel3 = new javax.swing.JPanel();
        button_exit = new javax.swing.JButton();
        button_run = new javax.swing.JButton();
        button_stop = new javax.swing.JButton();
        button_addToCue = new javax.swing.JButton();
        button_runCue = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        item_viewHTMLTable = new javax.swing.JMenuItem();
        item_viewCSVTable = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel6.setText("File:");

        list_files.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                list_filesValueChanged(evt);
            }
        });
        jScrollPane9.setViewportView(list_files);

        jLabel7.setText("Clustering Method:");

        list_initMethods.setToolTipText("Multiple methods can be selected");
        jScrollPane10.setViewportView(list_initMethods);

        jLabel8.setText("Points:");

        label_points.setText("0");

        jLabel10.setText("Attributes:");

        label_attributes.setText("0");

        field_clusters.setValue(3);

        label_clusters.setText("Clusters:");

        label_iter.setText("Max Iterations:");

        field_iterations.setValue(100);

        label_runs.setText("Max Runs:");

        field_runs.setValue(1);

        label_subsets.setText("Subsets:");

        field_subsets.setValue(10);

        label_scale.setText("Scale:");

        field_scale.setModel(new javax.swing.SpinnerNumberModel(2.0d, 0.0d, 2.0d, 0.05d));

        pane_stats.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pane_stats.setContentType("text/html");
        pane_stats.setEditable(false);
        jScrollPane2.setViewportView(pane_stats);

        list_clusteringMethods.setToolTipText("");
        jScrollPane5.setViewportView(list_clusteringMethods);

        jLabel9.setText("Initialization Method:");

        label_iterTol.setText("Iteration Tol:");

        field_tol.setEditor(new javax.swing.JSpinner.NumberEditor(field_tol, "0.000000000"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(70, 70, 70)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(label_points, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(label_attributes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addContainerGap(161, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator6))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(label_clusters)
                                    .addGap(58, 58, 58)
                                    .addComponent(field_clusters, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(label_iter)
                                        .addComponent(label_runs))
                                    .addGap(27, 27, 27)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(field_iterations)
                                        .addComponent(field_runs))))
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(label_subsets)
                                            .addComponent(label_scale)
                                            .addComponent(label_iterTol))
                                        .addGap(10, 10, 10)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(field_subsets, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                                                .addComponent(field_scale))
                                            .addComponent(field_tol, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(label_points))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(label_attributes)))
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(field_clusters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_clusters)
                    .addComponent(label_subsets)
                    .addComponent(field_subsets, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_iter)
                    .addComponent(field_iterations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_scale)
                    .addComponent(field_scale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_runs)
                    .addComponent(field_runs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_iterTol)
                    .addComponent(field_tol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Centroid Output:");

        jLabel2.setText("SSE Output:");

        jLabel3.setText("Run Output:");

        jLabel4.setText("Error Output:");

        jLabel5.setText("Status:");

        output_status.setText(".....");

        paneCentroids.setContentType("text/html");
        paneCentroids.setEditable(false);
        jScrollPane1.setViewportView(paneCentroids);

        paneSSE.setContentType("text/html");
        paneSSE.setEditable(false);
        jScrollPane3.setViewportView(paneSSE);

        paneRunData.setContentType("text/html");
        paneRunData.setEditable(false);
        jScrollPane4.setViewportView(paneRunData);

        paneError.setContentType("text/html");
        paneError.setEditable(false);
        paneError.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane11.setViewportView(paneError);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(output_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane11)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane1)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator4))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(output_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        button_exit.setText("<html><p style=\"color:darkgreen; font-size:12pt;\"><b>Exit</b></p></html>");
        button_exit.setPreferredSize(new java.awt.Dimension(85, 65));
        button_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_exitActionPerformed(evt);
            }
        });

        button_run.setText("<html><p style=\"color:red; font-size:12pt;\"><b>Run</b></p></html>");
        button_run.setPreferredSize(new java.awt.Dimension(85, 65));
        button_run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_runActionPerformed(evt);
            }
        });

        button_stop.setText("<html><p style=\"color:red; font-size:12pt;\"><b>Stop</b></p></html>");
        button_stop.setEnabled(false);
        button_stop.setPreferredSize(new java.awt.Dimension(85, 65));
        button_stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_stopActionPerformed(evt);
            }
        });

        button_addToCue.setText("<html><p style=\"color:blue; font-size:10pt;\"><b>Add 2 Cue</b></p></html>");
        button_addToCue.setPreferredSize(new java.awt.Dimension(85, 65));
        button_addToCue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_addToCueActionPerformed(evt);
            }
        });

        button_runCue.setText("<html><p style=\"color:red; font-size:10pt;\"><b>Run Cue</b></p></html>");
        button_runCue.setEnabled(false);
        button_runCue.setPreferredSize(new java.awt.Dimension(85, 65));
        button_runCue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_runCueActionPerformed(evt);
            }
        });

        jButton1.setText("<html><p style=\"color:blue; font-size:10pt;\"><b>Add Cue File</b></p></html>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(46, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(button_addToCue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(button_runCue, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(button_stop, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(button_run, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(button_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(button_addToCue, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(button_run, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                                .addComponent(button_exit, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                            .addComponent(button_runCue, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                            .addComponent(button_stop, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                        .addGap(29, 29, 29))))
        );

        jMenu1.setText("File");

        jMenu3.setText("Exit");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenu3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tools");

        item_viewHTMLTable.setText("Table View (HTML)");
        item_viewHTMLTable.setEnabled(false);
        item_viewHTMLTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_viewHTMLTableActionPerformed(evt);
            }
        });
        jMenu2.add(item_viewHTMLTable);

        item_viewCSVTable.setText("Table View (CSV)");
        item_viewCSVTable.setEnabled(false);
        item_viewCSVTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                item_viewCSVTableActionPerformed(evt);
            }
        });
        jMenu2.add(item_viewCSVTable);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_exitActionPerformed
        System.exit(EXIT_ON_CLOSE);
    }//GEN-LAST:event_button_exitActionPerformed

    private void button_runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_runActionPerformed
        runThread = new Thread(runDataSets);
        runThread.start();
        button_stop.setEnabled(true);
        button_run.setEnabled(false);
    }//GEN-LAST:event_button_runActionPerformed

    private void list_filesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_list_filesValueChanged
        try {
            DataSet ds = new DataSet(new File(list_files.getSelectedValue().toString()));
            label_points.setText("" + ds.numPoints);
            label_attributes.setText("" + ds.numAttributes);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ClusteringAnalyzerApp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ClusteringAnalyzerApp.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_list_filesValueChanged

    private void button_stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_stopActionPerformed
        stopped = true;
        button_stop.setEnabled(false);
        button_run.setEnabled(true);
    }//GEN-LAST:event_button_stopActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void item_viewHTMLTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_viewHTMLTableActionPerformed
        File table = new File("outTable.html");
        String[] headers = {"Initializing Method", "Clustering Method", "File", "Scale", "Max Iterations" ,
            "Max Runs" ,"# of Clusters" ,"Minimum Iterations", "Median Iterations", "Minimum SSE", "Median SSE", "Converged"};
        String[] types = {"string", "string", "string", "number", "number", "number", "number", "number", "number", "number", "number", "boolean"};
        Object[][] content = new String[datasets.size()][headers.length];
        for (int row = 0; row < datasets.size(); row++)
        {
            content[row][0] = (datasets.get(row).initMethod!=InitMethod.BF) ? 
                    datasets.get(row).initMethod.toString() : 
                    datasets.get(row).initMethod.toString() + " /w " + datasets.get(row).numSubsets + " subsets";
            content[row][1] = datasets.get(row).clusteringMethod.toString();
            content[row][2] = datasets.get(row).file.getName();
            content[row][3] = String.valueOf(datasets.get(row).scale);
            content[row][4] = String.valueOf(datasets.get(row).maxIterations);
            content[row][5] = String.valueOf(datasets.get(row).maxRuns);
            content[row][6] = String.valueOf(datasets.get(row).numClusters);
            content[row][7] = String.valueOf(datasets.get(row).minimumIters);
            content[row][8] = String.valueOf(datasets.get(row).medianIters);
            content[row][9] = String.valueOf(datasets.get(row).minimumSSE);
            content[row][10] = String.valueOf(datasets.get(row).medianSSE);
            content[row][11] = String.valueOf(datasets.get(row).converged);
        }
        HTMLUtilities.generateGoogleTable(headers, types, "", content, table);
        try {
            Desktop.getDesktop().browse(table.toURI());
        } catch (IOException ex) {
            Logger.getLogger(ClusteringAnalyzerApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_item_viewHTMLTableActionPerformed

    private void button_addToCueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_addToCueActionPerformed
     
        new Thread(addToQue).start();
        button_runCue.setEnabled(true);
        
    }//GEN-LAST:event_button_addToCueActionPerformed

    private void button_runCueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_runCueActionPerformed
        new Thread(runCue).start();
        button_runCue.setEnabled(false);
        if (!datasets.isEmpty())
        {
            datasets.clear();
        }
    }//GEN-LAST:event_button_runCueActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new Thread(addCueFile).start();
        button_runCue.setEnabled(false);
        if (!datasets.isEmpty())
        {
            datasets.clear();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void item_viewCSVTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_item_viewCSVTableActionPerformed
        try {
            Desktop.getDesktop().open(outFile);
        } catch (IOException ex) {
            Logger.getLogger(ClusteringAnalyzerApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_item_viewCSVTableActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClusteringAnalyzerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClusteringAnalyzerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClusteringAnalyzerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClusteringAnalyzerApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new ClusteringAnalyzerApp().setVisible(true);
            }
        });
    }
    Runnable addCueFile = new Runnable() {

            public void run() {
                JFileChooser jf = new JFileChooser();         
                jf.setFileFilter(new FileNameExtensionFilter("Text Files", "txt"));
                jf.setMultiSelectionEnabled(true);
                jf.showOpenDialog(rootPane);
                File[] selected = jf.getSelectedFiles();
                
                for (File file : selected) {
                    if (file.isFile()) {
                        ArrayList<DataSet> list = ClusteringOps.cueFileToDatasetList(file);
                        for (DataSet ds : list) {
                            cueList.add(ds);
                        }
                    }
                }
                output_status.setText("" + cueList.size() + " sets ready for run.");
                button_runCue.setEnabled(true);
            }
        };
    
    Runnable addToQue = new Runnable() {

            public void run() {
                for (Iterator<String> fileIt = list_files.getSelectedValuesList().iterator(); fileIt.hasNext();) {
                    String file = fileIt.next();
                    for (Iterator<InitMethod> init = list_initMethods.getSelectedValuesList().iterator(); init.hasNext();) {
                        InitMethod initMethod = init.next();
                        for (Iterator<ClusteringMethod> cm = list_clusteringMethods.getSelectedValuesList().iterator(); cm.hasNext() && !stopped;) {
                            try {
                                ClusteringMethod clusteringMethod = cm.next();
                                DataSet ds = new DataSet(new File(file));
                                ds.initMethod = initMethod;
                                ds.clusteringMethod = clusteringMethod;
                                ds.file = new File(file);
                                ds.numClusters = Integer.valueOf(field_clusters.getValue().toString());
                                ds.maxIterations = Integer.valueOf(field_iterations.getValue().toString());
                                ds.maxRuns = Integer.valueOf(field_runs.getValue().toString());
                                ds.numSubsets = Integer.valueOf(field_subsets.getValue().toString());
                                ds.scale = Double.parseDouble(field_scale.getValue().toString());
                                ds.tolerance = Float.valueOf(field_tol.getValue().toString());
                                cueList.add(ds);
                            } catch (FileNotFoundException ex) {
                                Logger.getLogger(ClusteringAnalyzerApp.class.getName()).log(Level.SEVERE, null, ex);
                            } catch (IOException ex) {
                                Logger.getLogger(ClusteringAnalyzerApp.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
                output_status.setText("" + cueList.size() + " sets ready for run.");
            }
        };
    
    Runnable runDataSets = new Runnable() {

        @Override
        public void run() {
            outFile.delete();
            try {
                br = new BufferedWriter(new FileWriter(outFile));
            } catch (IOException ex) {
            }
            Integer numClusters = Integer.valueOf(field_clusters.getValue().toString());
            Integer numIterations = Integer.valueOf(field_iterations.getValue().toString());
            Integer numRuns = Integer.valueOf(field_runs.getValue().toString());
            Integer numSubsets = Integer.valueOf(field_subsets.getValue().toString());
            Float tol = Float.valueOf(field_tol.getValue().toString());
            String centroidOut = "", sseOut = "", runDataOut = "", errorOut = "", overallStats = "";
            try {
                br.write(DataSet.csvHeader());
            } catch (IOException ex) {
            }
            int numTotalSets = list_files.getSelectedIndices().length * list_initMethods.getSelectedIndices().length * list_clusteringMethods.getSelectedIndices().length;
            progressBar.setMaximum(numTotalSets);
            progressBar.setValue(0);
            for (Iterator<String> fileIt = list_files.getSelectedValuesList().iterator(); fileIt.hasNext();) {
                String file = fileIt.next();
                for (Iterator<InitMethod> init = list_initMethods.getSelectedValuesList().iterator(); init.hasNext();) {
                    InitMethod initMethod = init.next();
                    for (Iterator<ClusteringMethod> cm = list_clusteringMethods.getSelectedValuesList().iterator(); cm.hasNext() && !stopped;) {
                        ClusteringMethod clusteringMethod = cm.next();
                        output_status.setText("Running " + file + " with " + initMethod.name() + " : " + clusteringMethod.name());
                        try {
                            DataSet ds = new DataSet(new File(file));
                            ds.tolerance = tol;
                            Double scale = Double.valueOf(field_scale.getValue().toString());
                            ds.runClusteringAlgorithm(initMethod, clusteringMethod, numClusters, numIterations, numRuns, numSubsets, scale);
                            br.write(ds.csvStats());
                            int recordNum = 1;
                            for (RunRecord rr : ds.runRecords) {
                                if (rr != null) {
                                    centroidOut += rr.htmlCentroidInfo();
                                    sseOut += rr.htmlSSEInfo();
                                    runDataOut += rr.htmlRunData();
                                    errorOut += rr.fluctuated ? "<div style=\"color:red;\">" + ds.file.getName().toUpperCase()
                                            + " using " + ds.initMethod + " : " + ds.clusteringMethod
                                            + " <b>fluctuated </b>" + rr.numFluctuated + " times on run " + recordNum + "</div>" : "";
                                    for (Object fluctData : rr.fluctuatingInstances) {
                                        if (fluctData instanceof Object[]) {
                                            Object[] data = (Object[]) fluctData;
                                            errorOut += "<div style=\"color:red; margin-left:1cm;\">Iteration : " + data[0] + "<br>"
                                                    + "Iteration SSE : " + data[1] + "<br>"
                                                    + "Previous SSE : " + data[2] + "<br>"
                                                    + "Fluctuation Amount : " + data[3] + "</div>";
                                        }
                                    }
                                    recordNum++;
                                }

                            }
                            sseOut += ds.htmlSSEStats();
                            runDataOut += ds.htmlTimeStats();
                            runDataOut += ds.htmlIterStats();
                            errorOut += ds.converged ? "" : "<div style=\"color:red;\">" + ds.file.getName().toUpperCase()
                                    + " using " + ds.initMethod + " : " + ds.clusteringMethod
                                    + " <b>did not converge in " + ds.maxIterations + " iterations</b>.</div>";
                            errorOut += ds.lostCentroid ? "<div style=\"color:red;\">" + ds.file.getName().toUpperCase()
                                    + " using " + ds.initMethod + " : " + ds.clusteringMethod
                                    + " has an <b>empty cluster or lost centroid</b>.</div>" : "";
                            errorOut += ds.fluctuating ? "<div style=\"color:red;\">" + ds.file.getName().toUpperCase()
                                    + " using " + ds.initMethod + " : " + ds.clusteringMethod
                                    + " <b>fluctuated</b></div>" : "";
                            overallStats += ("<div>" + ds.file.getName().substring(0, ds.file.getName().lastIndexOf(".")).toUpperCase()
                                    + " : " + ds.initMethod + " : " + ds.clusteringMethod + " : " + ds.minimumSSE + "</div>");
                            progressBar.setValue(progressBar.getValue() + 1);
                            datasets.add(ds);
                        } catch (IOException | NumberFormatException ex) {
                            errorOut += "<div style=\"color:red;\"><b><em>" + ex.getMessage() + "</em></b></div>";
                        }

                    }
                }
            }
            try {
                br.close();
            } catch (IOException ex) {
            }
            output_status.setText("Rendering Output");
            paneError.setText(errorOut);
            pane_stats.setText(overallStats);
            paneCentroids.setText(centroidOut);
            paneSSE.setText(sseOut);
            paneRunData.setText(runDataOut);
            output_status.setText("Done");
            button_run.setEnabled(true);
            button_stop.setEnabled(false);
            stopped = false;
            item_viewHTMLTable.setEnabled(true);
            item_viewCSVTable.setEnabled(true);
        }
    };
    
    Runnable runCue = new Runnable() {

        @Override
        public void run() {
            outFile.delete();
            try {
                br = new BufferedWriter(new FileWriter(outFile));
            } catch (IOException ex) {
            }
            
            String centroidOut = "", sseOut = "", runDataOut = "", errorOut = "", overallStats = "";
            try {
                br.write(DataSet.csvHeader());
            } catch (IOException ex) {
            }
            progressBar.setMaximum(cueList.size());
            progressBar.setValue(0);
            for (DataSet ds : cueList) {
                        output_status.setText("Running " + ds.file + " with " + ds.initMethod.name() + " : " + ds.clusteringMethod.name());
                        try {
                            ds.runClusteringAlgorithm();
                            br.write(ds.csvStats());
                            int recordNum = 1;
                            for (RunRecord rr : ds.runRecords) {
                                if (rr != null) {
                                    centroidOut += rr.htmlCentroidInfo();
                                    sseOut += rr.htmlSSEInfo();
                                    runDataOut += rr.htmlRunData();
                                    errorOut += rr.fluctuated ? "<div style=\"color:red;\">" + ds.file.getName().toUpperCase()
                                            + " using " + ds.initMethod + " : " + ds.clusteringMethod
                                            + " <b>fluctuated </b>" + rr.numFluctuated + " times on run " + recordNum + "</div>" : "";
                                    for (Object fluctData : rr.fluctuatingInstances) {
                                        if (fluctData instanceof Object[]) {
                                            Object[] data = (Object[]) fluctData;
                                            errorOut += "<div style=\"color:red; margin-left:1cm;\">Iteration : " + data[0] + "<br>"
                                                    + "Iteration SSE : " + data[1] + "<br>"
                                                    + "Previous SSE : " + data[2] + "<br>"
                                                    + "Fluctuation Amount : " + data[3] + "</div>";
                                        }
                                    }
                                    recordNum++;
                                }
                            }
                            sseOut += ds.htmlSSEStats();
                            runDataOut += ds.htmlTimeStats();
                            runDataOut += ds.htmlIterStats();
                            errorOut += ds.converged ? "" : "<div style=\"color:red;\">" + ds.file.getName().toUpperCase()
                                    + " using " + ds.initMethod + " : " + ds.clusteringMethod
                                    + " <b>did not converge in " + ds.maxIterations + " iterations</b>.</div>";
                            errorOut += ds.lostCentroid ? "<div style=\"color:red;\">" + ds.file.getName().toUpperCase()
                                    + " using " + ds.initMethod + " : " + ds.clusteringMethod
                                    + " has an <b>empty cluster or lost centroid</b>.</div>" : "";
                            errorOut += ds.fluctuating ? "<div style=\"color:red;\">" + ds.file.getName().toUpperCase()
                                    + " using " + ds.initMethod + " : " + ds.clusteringMethod
                                    + " <b>fluctuated</b></div>" : "";
                            overallStats += ("<div>" + ds.file.getName().substring(0, ds.file.getName().lastIndexOf(".")).toUpperCase()
                                    + " : " + ds.initMethod + " : " + ds.clusteringMethod + " : " + ds.minimumSSE + "</div>");
                            progressBar.setValue(progressBar.getValue() + 1);
                            datasets.add(ds);
                        } catch (IOException | NumberFormatException ex) {
                            errorOut += "<div style=\"color:red;\"><b><em>" + ex.getMessage() + "</em></b></div>";
                        }
            }
            try {
                br.close();
            } catch (IOException ex) {
            }
            output_status.setText("Rendering Output");
            paneError.setText(errorOut);
            pane_stats.setText(overallStats);
            paneCentroids.setText(centroidOut);
            paneSSE.setText(sseOut);
            paneRunData.setText(runDataOut);
            output_status.setText("Done");
            button_run.setEnabled(true);
            button_stop.setEnabled(false);
            stopped = false;
            item_viewHTMLTable.setEnabled(true);
            item_viewCSVTable.setEnabled(true);
            cueList.clear();
        }
    };
    private static File outFile = new File("out.csv");
    private Thread runThread = new Thread(runDataSets);
    private BufferedWriter br;
    private boolean stopped;
    private List<DataSet> datasets = new ArrayList<>();
    private List<DataSet> cueList = new ArrayList<>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_addToCue;
    private javax.swing.JButton button_exit;
    private javax.swing.JButton button_run;
    private javax.swing.JButton button_runCue;
    private javax.swing.JButton button_stop;
    private javax.swing.JSpinner field_clusters;
    private javax.swing.JSpinner field_iterations;
    private javax.swing.JSpinner field_runs;
    private javax.swing.JSpinner field_scale;
    private javax.swing.JSpinner field_subsets;
    private javax.swing.JSpinner field_tol;
    private javax.swing.JMenuItem item_viewCSVTable;
    private javax.swing.JMenuItem item_viewHTMLTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JLabel label_attributes;
    private javax.swing.JLabel label_clusters;
    private javax.swing.JLabel label_iter;
    private javax.swing.JLabel label_iterTol;
    private javax.swing.JLabel label_points;
    private javax.swing.JLabel label_runs;
    private javax.swing.JLabel label_scale;
    private javax.swing.JLabel label_subsets;
    private javax.swing.JList list_clusteringMethods;
    private javax.swing.JList list_files;
    private javax.swing.JList list_initMethods;
    private javax.swing.JLabel output_status;
    private javax.swing.JEditorPane paneCentroids;
    private javax.swing.JEditorPane paneError;
    private javax.swing.JEditorPane paneRunData;
    private javax.swing.JEditorPane paneSSE;
    private javax.swing.JEditorPane pane_stats;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
}
